import os
import sqlite3
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
from openpyxl import Workbook

load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª–∞–Ω–∫–æ–≤
BLANKS = {
    "bar": [
        "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
        "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
        "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
        "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
        "–°–û–£–°–´",
        "–°–ü–ï–¶–ò–ò",
        "–°–´–ü–£–ß–ò–ï",
        "–ß–ê–ô, –ö–û–§–ï",
        "–ó–ï–õ–ï–ù–¨",
        "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
        "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
        "–§–†–£–ö–¢–´",
        "–Ø–ì–û–î–´ –°/–ú",
        "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
    ],
    "alcohol": [
        "–í–ò–ù–û –ë–ï–õ–û–ï",
        "–í–ò–ù–û –ö–†–ê–°–ù–û–ï",
        "–í–ò–ù–û –û–†–ê–ù–ñ–ï–í–û–ï",
        "–í–ï–†–ú–£–¢",
        "–®–ê–ú–ü–ê–ù–°–ö–û–ï/–ò–ì–†–ò–°–¢–û–ï",
        "–í–ò–°–ö–ò",
        "–í–û–î–ö–ê",
        "–ì–û–†–¨–ö–ò–ï –ù–ê–°–¢–û–ô–ö–ò",
        "–î–ñ–ò–ù",
        "–ö–ê–õ–¨–í–ê–î–û–°",
        "–ö–û–ù–¨–Ø–ö/–ê–†–ú–ê–ù–¨–Ø–ö",
        "–õ–ò–ö–ï–†–´",
        "–ü–ò–í–û –†–ê–ó–õ–ò–í–ù–û–ï",
        "–ü–û–†–¢–í–ï–ô–ù",
        "–ü–û–†–¢–û/–•–ï–†–ï–°",
        "–†–û–ú",
        "–¢–ï–ö–ò–õ–ê",
        "–ü–ò–í–û –ë–£–¢–´–õ–ö–ê",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–û–ï –ü–ò–í–û"
    ]
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("inventory.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("DROP TABLE IF EXISTS inventory")
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    username TEXT,
    category TEXT,
    name TEXT,
    quantity REAL,
    UNIQUE(user_id, category, name)
)
''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_item_data = State()
    waiting_for_edit_input = State()  # –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    builder = InlineKeyboardBuilder()
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏
    builder.button(text="üç∏ –ë–∞—Ä", callback_data="blank_bar")
    builder.button(text="ü•É –ê–ª–∫–æ–≥–æ–ª—å", callback_data="blank_alcohol")
    builder.button(text="üìä Excel (–ª–∏—á–Ω—ã–π)", callback_data="generate_excel")
    builder.button(text="üìä Excel (–æ–±—â–∏–π)", callback_data="generate_excel_all")
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å", callback_data="edit_menu")
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="delete_menu")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_data")
    builder.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    builder.adjust(2, 2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "instruction")
async def show_instruction(callback: types.CallbackQuery):
    instruction_text = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º*\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ë–∞—Ä –∏–ª–∏ –ê–ª–∫–æ–≥–æ–ª—å)\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3. –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   `<–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: _–í–∏—Å–∫–∏ –î–∂–µ–∫ –î—ç–Ω–∏–µ–ª—Å 3.5_\n"
        "4. –í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ú–û–ñ–ù–û –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞\n"
        "6. –ö–Ω–æ–ø–∫–∞ üßπ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        "‚úèÔ∏è –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å¬ª\n"
        "‚ùå –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å¬ª –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ."
    )
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    await callback.message.answer(instruction_text, parse_mode="Markdown", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("blank_"))
async def select_blank(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    blank_type = callback.data.split("_")[1]
    await state.update_data(current_blank=blank_type)
    await show_categories(callback, blank_type)

async def show_categories(callback: types.CallbackQuery, blank_type: str):
    categories = BLANKS[blank_type]
    builder = InlineKeyboardBuilder()
    for category in categories:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({'–ë–∞—Ä' if blank_type == 'bar' else '–ê–ª–∫–æ–≥–æ–ª—å'}):"
    new_markup = builder.as_markup()
    try:
        if callback.message.text != new_text or callback.message.reply_markup.to_json() != new_markup.to_json():
            await callback.message.edit_text(new_text, reply_markup=new_markup)
        else:
            await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        await callback.message.answer(new_text, reply_markup=new_markup)

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await start(callback.message, state)

@dp.callback_query(F.data == "clear_data")
async def clear_data(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM inventory WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!‚úÖ", show_alert=True)

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n–ü—Ä–∏–º–µ—Ä: –†–æ–º 5\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ . –∏–ª–∏ , (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3,0)"
    )

@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]
        username = message.from_user.username or message.from_user.full_name
        valid_count = 0
        items = message.text.strip().split('\n')
        for item in items:
            parts = item.rsplit(" ", 1)
            if len(parts) != 2:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: '{item}'")
                continue
            name, quantity_str = parts[0].strip(), parts[1].replace(',', '.')
            try:
                quantity = float(quantity_str)
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '{item}'")
                continue
            try:
                cursor.execute('''
                    INSERT INTO inventory (user_id, username, category, name, quantity)
                    VALUES (?, ?, ?, ?, ?)
                    ON CONFLICT(user_id, category, name) DO UPDATE SET quantity = quantity + excluded.quantity
                ''', (message.from_user.id, username, category, name, quantity))
                valid_count += 1
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {item}")
        conn.commit()
        if valid_count > 0:
            await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {valid_count} –ø–æ–∑–∏—Ü–∏–π")
        else:
            await message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(message, state)

@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery, state: FSMContext):
    # –õ–∏—á–Ω—ã–π –æ—Ç—á—ë—Ç: –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    cursor.execute("SELECT username, category, name, quantity FROM inventory WHERE user_id = ?", (user_id,))
    items = cursor.fetchall()
    if not items:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    wb = Workbook()
    ws = wb.active
    now = datetime.now().strftime("%Y-%m-%d_%H-%M")
    ws.title = f"–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è_{now}"
    ws.append(["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    current_username = None
    current_category = None
    start_user_row = 2
    start_category_row = 2
    for row, (username, category, name, qty) in enumerate(items, start=2):
        if username != current_username:
            if current_username is not None:
                ws.merge_cells(f"A{start_user_row}:A{row-1}")
            current_username = username
            start_user_row = row
        if category != current_category:
            if current_category is not None:
                ws.merge_cells(f"B{start_category_row}:B{row-1}")
            current_category = category
            start_category_row = row
        ws.append([username if row == start_user_row else "",
                   category if row == start_category_row else "",
                   name, qty])
    if current_username:
        ws.merge_cells(f"A{start_user_row}:A{len(items)+1}")
    if current_category:
        ws.merge_cells(f"B{start_category_row}:B{len(items)+1}")
    ws.column_dimensions['A'].width = 20
    ws.column_dimensions['B'].width = 25
    ws.column_dimensions['C'].width = 35
    ws.column_dimensions['D'].width = 15
    filename = f"inventory_{user_id}_{now}.xlsx"
    wb.save(filename)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    await bot.send_document(
        callback.from_user.id,
        document=types.BufferedInputFile(open(filename, "rb").read(), filename=filename),
        caption="‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
    )
    os.remove(filename)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    await callback.message.delete()
    await start(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data == "generate_excel_all")
async def generate_excel_all(callback: types.CallbackQuery, state: FSMContext):
    # –û–±—â–∏–π –æ—Ç—á—ë—Ç: –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT username, category, name, quantity FROM inventory")
    items = cursor.fetchall()
    if not items:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    wb = Workbook()
    ws = wb.active
    now = datetime.now().strftime("%Y-%m-%d_%H-%M")
    ws.title = f"–û–±—â–∞—è_–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è_{now}"
    ws.append(["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
    for row in items:
        ws.append(list(row))
    ws.column_dimensions['A'].width = 20
    ws.column_dimensions['B'].width = 25
    ws.column_dimensions['C'].width = 35
    ws.column_dimensions['D'].width = 15
    filename = f"–æ–±—â–∞—è_{now}.xlsx"
    wb.save(filename)
    await bot.send_document(
        callback.from_user.id,
        document=types.BufferedInputFile(open(filename, "rb").read(), filename=filename),
        caption="‚úÖ –û—Ç—á–µ—Ç –æ–±—â–µ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤!"
    )
    os.remove(filename)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    await callback.message.delete()
    await start(callback.message, state)
    await callback.answer()

# ========= –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π =========

@dp.callback_query(F.data == "edit_menu")
async def show_edit_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT rowid, category, name, quantity FROM inventory WHERE user_id = ?", (user_id,))
    records = cursor.fetchall()
    if not records:
        return await callback.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!", show_alert=True)
    builder = InlineKeyboardBuilder()
    for rowid, category, name, quantity in records:
        button_text = f"{category} - {name} ({quantity})"
        builder.button(text=button_text, callback_data=f"edit:{rowid}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("edit:"))
async def edit_record(callback: types.CallbackQuery, state: FSMContext):
    rowid = callback.data.split(":", 1)[1]
    await state.update_data(edit_rowid=rowid)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ> <–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∏—Å–∫–∏_Jack 4.0")
    await state.set_state(InventoryState.waiting_for_edit_input)
    await callback.answer()

@dp.message(InventoryState.waiting_for_edit_input)
async def process_edit_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rowid = data.get("edit_rowid")
    if not rowid:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    parts = message.text.strip().rsplit(" ", 1)
    if len(parts) != 2:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ> <–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
    new_name, quantity_str = parts[0].strip(), parts[1].replace(',', '.')
    try:
        new_quantity = float(quantity_str)
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    try:
        cursor.execute("UPDATE inventory SET name = ?, quantity = ? WHERE rowid = ?", (new_name, new_quantity, rowid))
        conn.commit()
        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
    await state.clear()
    await start(message, state)

# ========= –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π =========

@dp.callback_query(F.data == "delete_menu")
async def show_delete_menu(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT rowid, category, name, quantity FROM inventory WHERE user_id = ?", (user_id,))
    records = cursor.fetchall()
    if not records:
        return await callback.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!", show_alert=True)
    builder = InlineKeyboardBuilder()
    for rowid, category, name, quantity in records:
        button_text = f"{category} - {name} ({quantity})"
        builder.button(text=button_text, callback_data=f"delete:{rowid}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("delete:"))
async def confirm_delete(callback: types.CallbackQuery):
    rowid = callback.data.split(":", 1)[1]
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data=f"confirm_delete:{rowid}")
    builder.button(text="–ù–µ—Ç", callback_data="delete_cancel")
    builder.adjust(2)
    await callback.message.edit_text("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å?", reply_markup=builder.as_markup())
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_delete:"))
async def delete_record(callback: types.CallbackQuery):
    rowid = callback.data.split(":", 1)[1]
    try:
        cursor.execute("DELETE FROM inventory WHERE rowid = ?", (rowid,))
        conn.commit()
        await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
    await callback.answer()

@dp.callback_query(F.data == "delete_cancel")
async def delete_cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

async def on_startup(bot: Bot) -> None:
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(bot: Bot) -> None:
    await bot.delete_webhook()

def main():
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    WEBHOOK_URL = os.getenv("WEBHOOK_URL")
    PORT = int(os.getenv("PORT", 10000))
    main()
