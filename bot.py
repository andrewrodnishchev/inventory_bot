import os
import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openpyxl import Workbook

load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª–∞–Ω–∫–æ–≤
BLANKS = {
    "bar": [
        "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
        "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
        "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
        "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
        "–°–û–£–°–´",
        "–°–ü–ï–¶–ò–ò",
        "–°–´–ü–£–ß–ò–ï",
        "–ß–ê–ô, –ö–û–§–ï",
        "–ó–ï–õ–ï–ù–¨",
        "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
        "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
        "–§–†–£–ö–¢–´",
        "–Ø–ì–û–î–´ –°/–ú",
        "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
    ],
    "alcohol": [
        "–í–ò–ù–û –ë–ï–õ–û–ï",
        "–í–ò–ù–û –ö–†–ê–°–ù–û–ï",
        "–í–ò–ù–û –û–†–ê–ù–ñ–ï–í–û–ï",
        "–í–ï–†–ú–£–¢",
        "–®–ê–ú–ü–ê–ù–°–ö–û–ï/–ò–ì–†–ò–°–¢–û–ï",
        "–í–ò–°–ö–ò",
        "–í–û–î–ö–ê",
        "–ì–û–†–¨–ö–ò–ï –ù–ê–°–¢–û–ô–ö–ò",
        "–î–ñ–ò–ù",
        "–ö–ê–õ–¨–í–ê–î–û–°",
        "–ö–û–ù–¨–Ø–ö/–ê–†–ú–ê–ù–¨–Ø–ö",
        "–õ–ò–ö–ï–†–´",
        "–ü–ò–í–û –†–ê–ó–õ–ò–í–ù–û–ï",
        "–ü–û–†–¢–í–ï–ô–ù",
        "–ü–û–†–¢–û/–•–ï–†–ï–°",
        "–†–û–ú",
        "–¢–ï–ö–ò–õ–ê",
        "–ü–ò–í–û –ë–£–¢–´–õ–ö–ê",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–û–ï –ü–ò–í–û"
    ]
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("inventory.db", check_same_thread=False)
cursor = conn.cursor()

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute("DROP TABLE IF EXISTS inventory")

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    username TEXT,
    category TEXT,
    name TEXT,
    quantity REAL,
    UNIQUE(user_id, category, name)
    )
''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_blank = State()
    waiting_for_category = State()
    waiting_for_item_data = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="üç∏ –ë–∞—Ä", callback_data="blank_bar")
    builder.button(text="ü•É –ê–ª–∫–æ–≥–æ–ª—å", callback_data="blank_alcohol")
    builder.button(text="üìä Excel", callback_data="generate_excel")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_data")
    builder.button(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
    builder.adjust(2, 2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "instruction")
async def show_instruction(callback: types.CallbackQuery):
    instruction_text = (
        "üìö *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º*\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ (–ë–∞—Ä –∏–ª–∏ –ê–ª–∫–æ–≥–æ–ª—å)\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3. –í–≤–æ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "   `<–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>`\n"
        "   –ù–∞–ø—Ä–∏–º–µ—Ä: _–í–∏—Å–∫–∏ –î–∂–µ–∫ –î—ç–Ω–∏–µ–ª—Å 3.5_\n"
        "4. –í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ú–û–ñ–ù–û –≤–≤–æ–¥–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É üìä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel-–æ—Ç—á–µ—Ç–∞\n"
        "6. –ö–Ω–æ–ø–∫–∞ üßπ –æ—á–∏—Å—Ç–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n\n"
        "‚ö†Ô∏è *–í–∞–∂–Ω–æ:*\n"
        "- –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5 –∏–ª–∏ 3,75)\n"
        "- –í–∞—à–µ –∏–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –æ—Ç—á–µ—Ç–∞—Ö\n"
        "- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞!"
    )

    await callback.message.answer(
        instruction_text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        .as_markup()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("blank_"))
async def select_blank(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    blank_type = callback.data.split("_")[1]
    await state.update_data(current_blank=blank_type)
    await show_categories(callback, blank_type)

async def show_categories(callback: types.CallbackQuery, blank_type: str):
    categories = BLANKS[blank_type]
    builder = InlineKeyboardBuilder()

    for category in categories:
        builder.button(text=category, callback_data=f"category_{category}")

    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)

    new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({'–ë–∞—Ä' if blank_type == 'bar' else '–ê–ª–∫–æ–≥–æ–ª—å'}):"
    new_markup = builder.as_markup()

    try:
        if (callback.message.text != new_text or
                callback.message.reply_markup.to_json() != new_markup.to_json()):
            await callback.message.edit_text(
                new_text,
                reply_markup=new_markup
            )
        else:
            await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é: {e}")
        await callback.message.answer(
            new_text,
            reply_markup=new_markup
        )

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await start(callback.message, state)

@dp.callback_query(F.data == "clear_data")
async def clear_data(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM inventory WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!‚úÖ", show_alert=True)

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    category = callback.data.split("_", 1)[1]
    await state.update_data(
        category=category,
        callback_message_id=callback.message.message_id
    )
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
        "–ü—Ä–∏–º–µ—Ä: –†–æ–º 5\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ . –∏–ª–∏ , (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2.5 –∏–ª–∏ 3,0)"
    )

@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]
        username = message.from_user.username or message.from_user.full_name
        valid_count = 0

        items = message.text.strip().split('\n')

        for item in items:
            parts = item.rsplit(" ", 1)
            if len(parts) != 2:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: '{item}'")
                continue

            name, quantity_str = parts[0].strip(), parts[1].replace(',', '.')

            try:
                quantity = float(quantity_str)
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: '{item}'")
                continue

            try:
                cursor.execute('''
                    INSERT INTO inventory (user_id, username, category, name, quantity)
                    VALUES (?, ?, ?, ?, ?)
                    ON CONFLICT(user_id, category, name) 
                    DO UPDATE SET quantity = quantity + excluded.quantity
                ''', (message.from_user.id, username, category, name, quantity))
                valid_count += 1
            except sqlite3.Error as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {item}")

        conn.commit()

        if valid_count > 0:
            await message.answer(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {valid_count} –ø–æ–∑–∏—Ü–∏–π")
        else:
            await message.answer("‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute(
        "SELECT username, category, name, quantity FROM inventory WHERE user_id = ?",
        (user_id,)
    )
    items = cursor.fetchall()

    if not items:
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    ws.append(["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    current_username = None
    current_category = None
    start_user_row = 2
    start_category_row = 2

    for row, (username, category, name, qty) in enumerate(items, start=2):
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if username != current_username:
            if current_username is not None:
                ws.merge_cells(f"A{start_user_row}:A{row-1}")
            current_username = username
            start_user_row = row

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category != current_category:
            if current_category is not None:
                ws.merge_cells(f"B{start_category_row}:B{row-1}")
            current_category = category
            start_category_row = row

        ws.append([username if row == start_user_row else "",
                   category if row == start_category_row else "",
                   name, qty])

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≥—Ä—É–ø–ø
    if current_username:
        ws.merge_cells(f"A{start_user_row}:A{len(items)+1}")
    if current_category:
        ws.merge_cells(f"B{start_category_row}:B{len(items)+1}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.column_dimensions['A'].width = 20  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    ws.column_dimensions['B'].width = 25  # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
    ws.column_dimensions['C'].width = 35  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
    ws.column_dimensions['D'].width = 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ

    filename = f"inventory_{user_id}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(
            callback.from_user.id,
            document=types.BufferedInputFile(file.read(), filename=filename),
            caption="‚úÖ –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
        )
    await callback.answer()

async def main():
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    asyncio.run(main())