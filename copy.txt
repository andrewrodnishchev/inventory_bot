import os
import re
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openpyxl import Workbook
from openpyxl.styles import Font

load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
if bot_token is None:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env.")

bot = Bot(token=bot_token)
dp = Dispatcher()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –±–∞—Ä–∞
CATEGORIES = [
    "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
    "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
    "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
    "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
    "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
    "–°–û–£–°–´",
    "–°–ü–ï–¶–ò–ò",
    "–°–´–ü–£–ß–ò–ï",
    "–ß–ê–ô, –ö–û–§–ï",
    "–ó–ï–õ–ï–ù–¨",
    "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
    "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
    "–§–†–£–ö–¢–´",
    "–Ø–ì–û–î–´ –°/–ú",
    "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
]

conn = sqlite3.connect("inventory.db")
cursor = conn.cursor()

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    category TEXT,
    name TEXT,
    unit TEXT,
    quantity INTEGER
)
''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_category = State()
    waiting_for_item_data = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ> <–ï–¥. –∏–∑–º.> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–∏—Å—Ç –±–∞–º–±—É–∫–∞ –ª 5"
    )

@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]
        text = message.text.strip()

        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        pattern = re.compile(
            r"""
            ^
            (?P<name>[^\d]+?)                # –ù–∞–∑–≤–∞–Ω–∏–µ (–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä)
            \s*                               # –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è
            (?P<unit>\D+?)                   # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            \s*                               # –ü—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
            (?P<quantity>\d+)                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            $
            """,
            re.VERBOSE | re.IGNORECASE
        )

        match = pattern.match(text)
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        name = match.group("name").strip()
        unit = match.group("unit").strip()
        quantity = match.group("quantity")

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit_aliases = {
            '–≥—Ä': ['–≥—Ä', '–≥—Ä–∞–º–º', 'g', '–≥—Ä–∞–º–º–∞'],
            '–∫–≥': ['–∫–≥', '–∫–∏–ª–æ–≥—Ä–∞–º–º', 'kg'],
            '–ª': ['–ª', '–ª–∏—Ç—Ä', 'l'],
            '—à—Ç': ['—à—Ç', '—à—Ç—É–∫', 'pcs']
        }

        for standardized_unit, variants in unit_aliases.items():
            if unit in variants:
                unit = standardized_unit
                break

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity = int(quantity)
        if quantity <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        cursor.execute(
            "INSERT INTO inventory VALUES (?, ?, ?, ?, ?)",
            (message.from_user.id, category, name, unit, quantity)
        )
        conn.commit()

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

    except Exception as e:
        error_examples = [
            "–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞:",
            "‚Ä¢ –ò–º–±–∏—Ä—å 350 –≥—Ä",
            "‚Ä¢ –õ–∏–º–æ–Ω 1800–≥—Ä",
            "‚Ä¢ –õ–∞–π–º 6260 –≥—Ä",
            "‚Ä¢ –ë–µ–ª–æ–∫ 2130–ª",
            "‚Ä¢ –ú–∞—Ä–∞–∫—É–π—è 1000 –ª",
            "‚Ä¢ –í–∑–±–∏—Ç—ã–µ —Å–ª–∏–≤–∫–∏ 660 –≥—Ä"
        ]

        error_msg = (
                "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!\n\n"
                + "\n".join(error_examples) +
                "\n\n‚ùó –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä\n"
                "2. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ\n"
                "3. –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: –≥—Ä/–∫–≥/–ª/—à—Ç"
        )

        await message.answer(error_msg)

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )

# –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é start –≤ start_command –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
@dp.message(F.text == "/start")
async def start_command(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.adjust(1)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute(
        "SELECT category, name, unit, quantity FROM inventory WHERE user_id = ?",
        (user_id,)
    )
    items = cursor.fetchall()

    if not items:
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!")

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    headers = ["–ì—Ä—É–ø–ø–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ï–¥. –∏–∑–º.", "–û—Å—Ç–∞—Ç–æ–∫ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π"]
    ws.append(headers)

    # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for cell in ws[1]:
        cell.font = Font(bold=True)

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = {}
    for item in items:
        category, name, unit, quantity = item
        if category not in data:
            data[category] = []
        data[category].append((name, unit, quantity))

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    row = 2
    for category, items_list in data.items():
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        ws[f'A{row}'] = category
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for name, unit, quantity in items_list:
            ws[f'B{row}'] = name
            ws[f'C{row}'] = unit
            ws[f'D{row}'] = quantity
            row += 1
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        row += 1

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.column_dimensions['A'].width = 35
    ws.column_dimensions['B'].width = 35
    ws.column_dimensions['C'].width = 15
    ws.column_dimensions['D'].width = 20

    filename = f"inventory_{user_id}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(
            chat_id=user_id,
            document=types.BufferedInputFile(file.read(), filename=filename),
            caption="–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!"
        )

    await callback.answer()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)




















import os
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openpyxl import Workbook

load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
    "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
    "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
    "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
    "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
    "–°–û–£–°–´",
    "–°–ü–ï–¶–ò–ò",
    "–°–´–ü–£–ß–ò–ï",
    "–ß–ê–ô, –ö–û–§–ï",
    "–ó–ï–õ–ï–ù–¨",
    "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
    "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
    "–§–†–£–ö–¢–´",
    "–Ø–ì–û–î–´ –°/–ú",
    "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("inventory.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    category TEXT,
    name TEXT,
    quantity INTEGER
)''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_category = State()
    waiting_for_item_data = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "clear_data")
async def clear_data(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM inventory WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!‚úÖ", show_alert=True)

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
        "–ü—Ä–∏–º–µ—Ä: –†–æ–º 5"
    )

@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]

        parts = message.text.rsplit(" ", 1)
        if len(parts) != 2:
            raise ValueError

        name, quantity = parts[0], int(parts[1])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "SELECT quantity FROM inventory WHERE user_id = ? AND category = ? AND name = ?",
            (message.from_user.id, category, name)
        )
        existing_item = cursor.fetchone()

        if existing_item:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_quantity = existing_item[0] + quantity
            cursor.execute(
                "UPDATE inventory SET quantity = ? WHERE user_id = ? AND category = ? AND name = ?",
                (new_quantity, message.from_user.id, category, name)
            )
        else:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            cursor.execute(
                "INSERT INTO inventory VALUES (?, ?, ?, ?)",
                (message.from_user.id, category, name, quantity)
            )

        conn.commit()

        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await start(message, state)

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä: –í–∏—Å–∫–∏ 3")


@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute(
        "SELECT category, name, quantity FROM inventory WHERE user_id = ?",
        (user_id,)
    )
    items = cursor.fetchall()

    if not items:
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!", show_alert=True)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    ws.append(["–ì—Ä—É–ø–ø–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    data = {}
    for category, name, qty in items:
        if category not in data:
            data[category] = []
        data[category].append((name, qty))

    for category, items in data.items():
        ws.append([category, "", ""])
        for name, qty in items:
            ws.append(["", name, qty])
        ws.append([])

    filename = f"inventory_{user_id}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(
            callback.from_user.id,
            document=types.BufferedInputFile(file.read(), filename=filename),
            caption="–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!"
        )

    await callback.answer()

async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    import asyncio
    asyncio.run(main())











import os
import sqlite3

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openpyxl import Workbook


load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = [
    "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
    "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
    "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
    "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
    "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
    "–°–û–£–°–´",
    "–°–ü–ï–¶–ò–ò",
    "–°–´–ü–£–ß–ò–ï",
    "–ß–ê–ô, –ö–û–§–ï",
    "–ó–ï–õ–ï–ù–¨",
    "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
    "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
    "–§–†–£–ö–¢–´",
    "–Ø–ì–û–î–´ –°/–ú",
    "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
]

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("inventory.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    category TEXT,
    name TEXT,
    quantity INTEGER
)''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_category = State()
    waiting_for_item_data = State()

@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"category_{category}")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder.as_markup())

@dp.callback_query(F.data == "clear_data")
async def clear_data(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM inventory WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!‚úÖ", show_alert=True)

@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
        "–ü—Ä–∏–º–µ—Ä: –†–æ–º 5"
    )

@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        items = message.text.strip().split('\n')

        for item in items:
            parts = item.rsplit(" ", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

            if len(parts) != 2:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è: {item}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            name = parts[0].strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
            quantity = int(parts[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            cursor.execute(
                "SELECT quantity FROM inventory WHERE user_id = ? AND category = ? AND name = ?",
                (message.from_user.id, category, name)
            )
            existing_item = cursor.fetchone()

            if existing_item:
                new_quantity = existing_item[0] + quantity
                cursor.execute(
                    "UPDATE inventory SET quantity = ? WHERE user_id = ? AND category = ? AND name = ?",
                    (new_quantity, message.from_user.id, category, name)
                )
            else:
                cursor.execute(
                    "INSERT INTO inventory VALUES (?, ?, ?, ?)",
                    (message.from_user.id, category, name, quantity)
                )

        conn.commit()
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        await start(message, state)

    except ValueError as ve:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {ve}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")




@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute(
        "SELECT category, name, quantity FROM inventory WHERE user_id = ?",
        (user_id,)
    )
    items = cursor.fetchall()

    if not items:
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!", show_alert=True)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    ws.append(["–ì—Ä—É–ø–ø–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    data = {}
    for category, name, qty in items:
        if category not in data:
            data[category] = []
        data[category].append((name, qty))

    for category, items in data.items():
        ws.append([category, "", ""])
        for name, qty in items:
            ws.append(["", name, qty])
        ws.append([])

    filename = f"inventory_{user_id}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(
            callback.from_user.id,
            document=types.BufferedInputFile(file.read(), filename=filename),
            caption="–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!"
        )

    await callback.answer()

async def main():
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    import asyncio
    asyncio.run(main())




import os
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openpyxl import Workbook

load_dotenv("token.env")

bot_token = os.getenv("BOT_TOKEN")
bot = Bot(token=bot_token)
dp = Dispatcher()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±–ª–∞–Ω–∫–æ–≤
BLANKS = {
    "bar": [
        "–ë–ê–† - –ü–†–û–ß–ï–ï —Ç–æ–≤–∞—Ä",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–´–ï –ù–ê–ü–ò–¢–ö–ò**",
        "–ß–ê–ô/–ö–û–§–ï —Ç–æ–≤–∞—Ä",
        "–ö–û–ù–î–ò–¢–ï–†–ö–ê/–í–´–ü–ï–ß–ö–ê",
        "–ö–û–ù–°–ï–†–í–ê–¶–ò–Ø",
        "–°–û–£–°–´",
        "–°–ü–ï–¶–ò–ò",
        "–°–´–ü–£–ß–ò–ï",
        "–ß–ê–ô, –ö–û–§–ï",
        "–ó–ï–õ–ï–ù–¨",
        "–ú–û–õ–û–ß–ù–´–ï –ü–†–û–î–£–ö–¢–´",
        "–û–í–û–©–ò –°–í–ï–ñ–ò–ï",
        "–§–†–£–ö–¢–´",
        "–Ø–ì–û–î–´ –°/–ú",
        "–ù–ê–ü–ò–¢–ö–ò –ë–õ –ü–§"
    ],
    "alcohol": [
        "–í–ò–ù–û –ë–ï–õ–û–ï",
        "–í–ò–ù–û –ö–†–ê–°–ù–û–ï",
        "–í–ò–ù–û –û–†–ê–ù–ñ–ï–í–û–ï",
        "–í–ï–†–ú–£–¢",
        "–®–ê–ú–ü–ê–ù–°–ö–û–ï/–ò–ì–†–ò–°–¢–û–ï",
        "–í–ò–°–ö–ò",
        "–í–û–î–ö–ê",
        "–ì–û–†–¨–ö–ò–ï –ù–ê–°–¢–û–ô–ö–ò",
        "–î–ñ–ò–ù",
        "–ö–ê–õ–¨–í–ê–î–û–°",
        "–ö–û–ù–¨–Ø–ö/–ê–†–ú–ê–ù–¨–Ø–ö",
        "–õ–ò–ö–ï–†–´",
        "–ü–ò–í–û –†–ê–ó–õ–ò–í–ù–û–ï",
        "–ü–û–†–¢–í–ï–ô–ù",
        "–ü–û–†–¢–û/–•–ï–†–ï–°",
        "–†–û–ú",
        "–¢–ï–ö–ò–õ–ê",
        "–ü–ò–í–û –ë–£–¢–´–õ–ö–ê",
        "–ë–ï–ó–ê–õ–ö–û–ì–û–õ–¨–ù–û–ï –ü–ò–í–û"
    ]
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("inventory.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
CREATE TABLE IF NOT EXISTS inventory (
    user_id INTEGER,
    category TEXT,
    name TEXT,
    quantity INTEGER
)''')
conn.commit()

class InventoryState(StatesGroup):
    waiting_for_blank = State()
    waiting_for_category = State()
    waiting_for_item_data = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.button(text="üç∏ –ë–ª–∞–Ω–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –ë–∞—Ä", callback_data="blank_bar")
    builder.button(text="ü•É –ë–ª–∞–Ω–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –ê–ª–∫–æ–≥–æ–ª—å", callback_data="blank_alcohol")
    builder.button(text="üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="generate_excel")
    builder.button(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –±–ª–∞–Ω–∫–∞
@dp.callback_query(F.data.startswith("blank_"))
async def select_blank(callback: types.CallbackQuery, state: FSMContext):
    blank_type = callback.data.split("_")[1]
    await state.update_data(current_blank=blank_type)
    await show_categories(callback, blank_type)

async def show_categories(callback: types.CallbackQuery, blank_type: str):
    categories = BLANKS[blank_type]
    builder = InlineKeyboardBuilder()

    for category in categories:
        builder.button(text=category, callback_data=f"category_{category}")

    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
    builder.adjust(1)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_text = callback.message.text
    new_text = f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ({'–ë–∞—Ä' if blank_type == 'bar' else '–ê–ª–∫–æ–≥–æ–ª—å'}):"

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–æ–≤—ã–º, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_text != new_text or callback.message.reply_markup != builder.as_markup():
        await callback.message.edit_text(
            new_text,
            reply_markup=builder.as_markup()
        )


# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await start(callback.message, state)

# –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.callback_query(F.data == "clear_data")
async def clear_data(callback: types.CallbackQuery):
    cursor.execute("DELETE FROM inventory WHERE user_id = ?", (callback.from_user.id,))
    conn.commit()
    await callback.answer("–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!‚úÖ", show_alert=True)

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category_"))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    category = callback.data.split("_", 1)[1]
    await state.update_data(category=category)
    await state.set_state(InventoryState.waiting_for_item_data)
    await callback.message.answer(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–ù–∞–∑–≤–∞–Ω–∏–µ> <–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ>\n"
        "–ü—Ä–∏–º–µ—Ä: –†–æ–º 5"
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º callback –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(callback=callback)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@dp.message(InventoryState.waiting_for_item_data)
async def process_item_data(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        category = data["category"]
        blank_type = data.get("current_blank", "bar")

        # –ü–æ–ª—É—á–∞–µ–º callback –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        callback = data.get("callback")

        items = message.text.strip().split('\n')
        for item in items:
            parts = item.rsplit(" ", 1)
            if len(parts) != 2:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è: '{item}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            name = parts[0].strip()
            try:
                quantity = int(parts[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            except ValueError:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è: '{item}'. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            cursor.execute(
                "SELECT quantity FROM inventory WHERE user_id = ? AND category = ? AND name = ?",
                (message.from_user.id, category, name)
            )
            existing_item = cursor.fetchone()

            if existing_item:
                new_quantity = existing_item[0] + quantity
                cursor.execute(
                    "UPDATE inventory SET quantity = ? WHERE user_id = ? AND category = ? AND name = ?",
                    (new_quantity, message.from_user.id, category, name)
                )
            else:
                cursor.execute(
                    "INSERT INTO inventory VALUES (?, ?, ?, ?)",
                    (message.from_user.id, category, name, quantity)
                )

        conn.commit()
        await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

        # –ó–¥–µ—Å—å –≤—ã–∑–æ–≤ show_categories —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        await show_categories(callback, blank_type)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")





# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
@dp.callback_query(F.data == "generate_excel")
async def generate_excel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute(
        "SELECT category, name, quantity FROM inventory WHERE user_id = ?",
        (user_id,)
    )
    items = cursor.fetchall()

    if not items:
        return await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞!", show_alert=True)

    wb = Workbook()
    ws = wb.active
    ws.title = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è"
    ws.append(["–ì—Ä—É–ø–ø–∞", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
    data = {}
    for category, name, qty in items:
        data.setdefault(category, []).append((name, qty))

    row_index = 2
    for category, items in data.items():
        start_row = row_index
        for name, qty in items:
            ws.append([category if row_index == start_row else "", name, qty])
            row_index += 1
        ws.merge_cells(start_row=start_row, end_row=row_index-1, start_column=1, end_column=1)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ws.column_dimensions['A'].width = 35
    ws.column_dimensions['B'].width = 35
    ws.column_dimensions['C'].width = 15

    filename = f"inventory_{user_id}.xlsx"
    wb.save(filename)

    with open(filename, "rb") as file:
        await bot.send_document(
            callback.from_user.id,
            document=types.BufferedInputFile(file.read(), filename=filename),
            caption="–í–∞—à–∞ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!"
        )

    await callback.answer()

async def main():
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    import asyncio
    asyncio.run(main())
